{
  "api/BundleSystem.AssetBundleBuilder.html": {
    "href": "api/BundleSystem.AssetBundleBuilder.html",
    "title": "Class AssetBundleBuilder | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetBundleBuilder class that contains actual build functionalities Inheritance Object AssetBundleBuilder Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public static class AssetBundleBuilder Methods BuildAssetBundles(AssetBundleBuildSetting) Declaration public static void BuildAssetBundles(AssetBundleBuildSetting setting) Parameters Type Name Description AssetBundleBuildSetting setting WriteExpectedSharedBundles(AssetBundleBuildSetting) Declaration public static void WriteExpectedSharedBundles(AssetBundleBuildSetting setting) Parameters Type Name Description AssetBundleBuildSetting setting"
  },
  "api/BundleSystem.AssetBundleBuildManifest.BundleInfo.html": {
    "href": "api/BundleSystem.AssetBundleBuildManifest.BundleInfo.html",
    "title": "Struct AssetBundleBuildManifest.BundleInfo | LocusBundleSystemV2 documentation",
    "keywords": "Struct AssetBundleBuildManifest.BundleInfo Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public struct BundleInfo Fields BundleName Declaration public string BundleName Field Value Type Description String Dependencies Declaration public List<string> Dependencies Field Value Type Description List < String > HashString Declaration public string HashString Field Value Type Description String IsLocal Declaration public bool IsLocal Field Value Type Description Boolean Size Declaration public long Size Field Value Type Description Int64 Methods ToCachedBundle() Declaration public CachedAssetBundle ToCachedBundle() Returns Type Description CachedAssetBundle"
  },
  "api/BundleSystem.AssetBundleBuildManifest.html": {
    "href": "api/BundleSystem.AssetBundleBuildManifest.html",
    "title": "Class AssetBundleBuildManifest | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetBundleBuildManifest Inheritance Object AssetBundleBuildManifest Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax [Serializable] public class AssetBundleBuildManifest Fields BuildTarget Declaration public string BuildTarget Field Value Type Description String BuildTime This does not included in hash calculation, used to find newer version between cached manifest and local manifest Declaration public long BuildTime Field Value Type Description Int64 BundleInfos Declaration public List<AssetBundleBuildManifest.BundleInfo> BundleInfos Field Value Type Description List < AssetBundleBuildManifest.BundleInfo > GlobalHashString Declaration public string GlobalHashString Field Value Type Description String RemoteURL Declaration public string RemoteURL Field Value Type Description String Methods CollectSubsetBundleInfoes(IEnumerable<String>) Collect subset of bundleinfoes that interested, including dependencies Declaration public List<AssetBundleBuildManifest.BundleInfo> CollectSubsetBundleInfoes(IEnumerable<string> subsetNames) Parameters Type Name Description IEnumerable < String > subsetNames Returns Type Description List < AssetBundleBuildManifest.BundleInfo > TryGetBundleHash(String, out Hash128) Declaration public bool TryGetBundleHash(string name, out Hash128 hash) Parameters Type Name Description String name Hash128 hash Returns Type Description Boolean TryGetBundleInfo(String, out AssetBundleBuildManifest.BundleInfo) Declaration public bool TryGetBundleInfo(string name, out AssetBundleBuildManifest.BundleInfo info) Parameters Type Name Description String name AssetBundleBuildManifest.BundleInfo info Returns Type Description Boolean TryParse(String, out AssetBundleBuildManifest) Declaration public static bool TryParse(string json, out AssetBundleBuildManifest manifest) Parameters Type Name Description String json AssetBundleBuildManifest manifest Returns Type Description Boolean"
  },
  "api/BundleSystem.AssetBundleBuildProcessors.html": {
    "href": "api/BundleSystem.AssetBundleBuildProcessors.html",
    "title": "Class AssetBundleBuildProcessors | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetBundleBuildProcessors Inheritance Object AssetBundleBuildProcessors Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class AssetBundleBuildProcessors : IPreprocessBuildWithReport, IPostprocessBuildWithReport Properties callbackOrder Declaration public int callbackOrder { get; } Property Value Type Description Int32 Methods OnPostprocessBuild(BuildReport) Declaration public void OnPostprocessBuild(BuildReport report) Parameters Type Name Description BuildReport report OnPreprocessBuild(BuildReport) Declaration public void OnPreprocessBuild(BuildReport report) Parameters Type Name Description BuildReport report"
  },
  "api/BundleSystem.AssetBundleBuildSetting.html": {
    "href": "api/BundleSystem.AssetBundleBuildSetting.html",
    "title": "Class AssetBundleBuildSetting | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetBundleBuildSetting Inheritance Object AssetBundleBuildSetting Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public abstract class AssetBundleBuildSetting : ScriptableObject Fields CacheServerHost Declaration public string CacheServerHost Field Value Type Description String CacheServerPort Declaration public int CacheServerPort Field Value Type Description Int32 CleanCacheInEditor Declaration public bool CleanCacheInEditor Field Value Type Description Boolean EmulateInEditor Declaration public bool EmulateInEditor Field Value Type Description Boolean EmulateWithoutRemoteURL Declaration public bool EmulateWithoutRemoteURL Field Value Type Description Boolean ForceRebuild Declaration public bool ForceRebuild Field Value Type Description Boolean OutputFolder output folder inside project Declaration public string OutputFolder Field Value Type Description String RemoteURL Declaration public string RemoteURL Field Value Type Description String UseCacheServer Declaration public bool UseCacheServer Field Value Type Description Boolean Methods GetBundleSettings() Provide actual assets to bundle Declaration public abstract List<BundleSetting> GetBundleSettings() Returns Type Description List < BundleSetting > IsValid() Check setting is valid Declaration public virtual bool IsValid() Returns Type Description Boolean"
  },
  "api/BundleSystem.AssetDependencyTree.Context.html": {
    "href": "api/BundleSystem.AssetDependencyTree.Context.html",
    "title": "Class AssetDependencyTree.Context | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetDependencyTree.Context Inheritance Object AssetDependencyTree.Context Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class Context Fields DependencyDic Declaration public Dictionary<string, HashSet<string>> DependencyDic Field Value Type Description Dictionary < String , HashSet < String >> IndirectNodes Declaration public Dictionary<string, AssetDependencyTree.Node> IndirectNodes Field Value Type Description Dictionary < String , AssetDependencyTree.Node > ResultSharedNodes Declaration public List<AssetDependencyTree.RootNode> ResultSharedNodes Field Value Type Description List < AssetDependencyTree.RootNode > RootNodes Declaration public Dictionary<string, AssetDependencyTree.RootNode> RootNodes Field Value Type Description Dictionary < String , AssetDependencyTree.RootNode >"
  },
  "api/BundleSystem.AssetDependencyTree.html": {
    "href": "api/BundleSystem.AssetDependencyTree.html",
    "title": "Class AssetDependencyTree | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetDependencyTree this class finds out duplicated topmost assets and make them into one single shared bundle one by one(to reduce bundle rebuild) so that there would be no asset duplicated Inheritance Object AssetDependencyTree Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public static class AssetDependencyTree Methods ProcessDependencyTree(List<BundleSetting>) Declaration public static AssetDependencyTree.ProcessResult ProcessDependencyTree(List<BundleSetting> bundleSettings) Parameters Type Name Description List < BundleSetting > bundleSettings Returns Type Description AssetDependencyTree.ProcessResult"
  },
  "api/BundleSystem.AssetDependencyTree.Node.html": {
    "href": "api/BundleSystem.AssetDependencyTree.Node.html",
    "title": "Class AssetDependencyTree.Node | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetDependencyTree.Node Inheritance Object AssetDependencyTree.Node AssetDependencyTree.RootNode Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class Node Constructors Node(String, AssetDependencyTree.RootNode) Declaration public Node(string path, AssetDependencyTree.RootNode root) Parameters Type Name Description String path AssetDependencyTree.RootNode root Fields Children Declaration public Dictionary<string, AssetDependencyTree.Node> Children Field Value Type Description Dictionary < String , AssetDependencyTree.Node > Properties HasChild Declaration public bool HasChild { get; } Property Value Type Description Boolean IsRoot Declaration public bool IsRoot { get; } Property Value Type Description Boolean Path Declaration public string Path { get; } Property Value Type Description String Root Declaration public AssetDependencyTree.RootNode Root { get; protected set; } Property Value Type Description AssetDependencyTree.RootNode Methods CollectNodes(AssetDependencyTree.Context) Declaration public void CollectNodes(AssetDependencyTree.Context context) Parameters Type Name Description AssetDependencyTree.Context context RemoveFromTree(AssetDependencyTree.Context) Declaration public void RemoveFromTree(AssetDependencyTree.Context context) Parameters Type Name Description AssetDependencyTree.Context context"
  },
  "api/BundleSystem.AssetDependencyTree.ProcessResult.html": {
    "href": "api/BundleSystem.AssetDependencyTree.ProcessResult.html",
    "title": "Class AssetDependencyTree.ProcessResult | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetDependencyTree.ProcessResult Inheritance Object AssetDependencyTree.ProcessResult Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class ProcessResult Fields BundleDependencies Declaration public Dictionary<string, HashSet<string>> BundleDependencies Field Value Type Description Dictionary < String , HashSet < String >> ResultBundles Declaration public List<AssetBundleBuild> ResultBundles Field Value Type Description List < AssetBundleBuild > SharedBundles Declaration public List<AssetBundleBuild> SharedBundles Field Value Type Description List < AssetBundleBuild >"
  },
  "api/BundleSystem.AssetDependencyTree.RootNode.html": {
    "href": "api/BundleSystem.AssetDependencyTree.RootNode.html",
    "title": "Class AssetDependencyTree.RootNode | LocusBundleSystemV2 documentation",
    "keywords": "Class AssetDependencyTree.RootNode Inheritance Object AssetDependencyTree.Node AssetDependencyTree.RootNode Inherited Members AssetDependencyTree.Node.Root AssetDependencyTree.Node.Path AssetDependencyTree.Node.Children AssetDependencyTree.Node.IsRoot AssetDependencyTree.Node.HasChild AssetDependencyTree.Node.RemoveFromTree(AssetDependencyTree.Context) AssetDependencyTree.Node.CollectNodes(AssetDependencyTree.Context) Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class RootNode : AssetDependencyTree.Node Constructors RootNode(String, String, HashSet<String>, Boolean, Boolean) Declaration public RootNode(string path, string bundleName, HashSet<string> deps, bool isShared, bool allowCollect) Parameters Type Name Description String path String bundleName HashSet < String > deps Boolean isShared Boolean allowCollect Fields ReferencedBundleNames Declaration public HashSet<string> ReferencedBundleNames Field Value Type Description HashSet < String > Properties AllowCollect Declaration public bool AllowCollect { get; } Property Value Type Description Boolean BundleName Declaration public string BundleName { get; } Property Value Type Description String IsShared Declaration public bool IsShared { get; } Property Value Type Description Boolean"
  },
  "api/BundleSystem.BundleAsyncOperation.html": {
    "href": "api/BundleSystem.BundleAsyncOperation.html",
    "title": "Class BundleAsyncOperation | LocusBundleSystemV2 documentation",
    "keywords": "Class BundleAsyncOperation Inheritance Object BundleAsyncOperationBase BundleAsyncOperation Implements IAwaiter < BundleAsyncOperation > Inherited Members BundleAsyncOperationBase.IsDone BundleAsyncOperationBase.Succeeded BundleAsyncOperationBase.ErrorCode BundleAsyncOperationBase.TotalCount BundleAsyncOperationBase.CurrentCount BundleAsyncOperationBase.Progress BundleAsyncOperationBase.CurrentlyLoadingFromCache BundleAsyncOperationBase.m_OnComplete BundleAsyncOperationBase.keepWaiting BundleAsyncOperationBase.AwaiterOnComplete(Action) Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class BundleAsyncOperation : BundleAsyncOperationBase, IAwaiter<BundleAsyncOperation>, ICriticalNotifyCompletion Methods GetAwaiter() Declaration public IAwaiter<BundleAsyncOperation> GetAwaiter() Returns Type Description IAwaiter < BundleAsyncOperation > Explicit Interface Implementations IAwaiter<BundleAsyncOperation>.GetResult() Declaration BundleAsyncOperation IAwaiter<BundleAsyncOperation>.GetResult() Returns Type Description BundleAsyncOperation IAwaiter<BundleAsyncOperation>.IsCompleted Declaration bool IAwaiter<BundleAsyncOperation>.IsCompleted { get; } Returns Type Description Boolean Implements IAwaiter<TResult>"
  },
  "api/BundleSystem.BundleAsyncOperation-1.html": {
    "href": "api/BundleSystem.BundleAsyncOperation-1.html",
    "title": "Class BundleAsyncOperation<T> | LocusBundleSystemV2 documentation",
    "keywords": "Class BundleAsyncOperation<T> assetbundle update Inheritance Object BundleAsyncOperationBase BundleAsyncOperation<T> Implements IAwaiter < BundleAsyncOperation <T>> Inherited Members BundleAsyncOperationBase.IsDone BundleAsyncOperationBase.Succeeded BundleAsyncOperationBase.ErrorCode BundleAsyncOperationBase.TotalCount BundleAsyncOperationBase.CurrentCount BundleAsyncOperationBase.Progress BundleAsyncOperationBase.CurrentlyLoadingFromCache BundleAsyncOperationBase.m_OnComplete BundleAsyncOperationBase.keepWaiting BundleAsyncOperationBase.AwaiterOnComplete(Action) Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class BundleAsyncOperation<T> : BundleAsyncOperationBase, IAwaiter<BundleAsyncOperation<T>>, ICriticalNotifyCompletion Type Parameters Name Description T Properties Result Declaration public T Result { get; } Property Value Type Description T Methods GetAwaiter() Declaration public IAwaiter<BundleAsyncOperation<T>> GetAwaiter() Returns Type Description IAwaiter < BundleAsyncOperation <T>> Explicit Interface Implementations IAwaiter<BundleAsyncOperation<T>>.GetResult() Declaration BundleAsyncOperation<T> IAwaiter<BundleAsyncOperation<T>>.GetResult() Returns Type Description BundleAsyncOperation <T> IAwaiter<BundleAsyncOperation<T>>.IsCompleted Declaration bool IAwaiter<BundleAsyncOperation<T>>.IsCompleted { get; } Returns Type Description Boolean Implements IAwaiter<TResult>"
  },
  "api/BundleSystem.BundleAsyncOperationBase.html": {
    "href": "api/BundleSystem.BundleAsyncOperationBase.html",
    "title": "Class BundleAsyncOperationBase | LocusBundleSystemV2 documentation",
    "keywords": "Class BundleAsyncOperationBase Inheritance Object BundleAsyncOperationBase BundleAsyncOperation BundleAsyncOperation<T> Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class BundleAsyncOperationBase : CustomYieldInstruction Properties CurrentCount Declaration public int CurrentCount { get; } Property Value Type Description Int32 CurrentlyLoadingFromCache Declaration public bool CurrentlyLoadingFromCache { get; } Property Value Type Description Boolean ErrorCode Declaration public BundleErrorCode ErrorCode { get; } Property Value Type Description BundleErrorCode IsDone Declaration public bool IsDone { get; } Property Value Type Description Boolean keepWaiting Declaration public override bool keepWaiting { get; } Property Value Type Description Boolean Progress Declaration public float Progress { get; } Property Value Type Description Single Succeeded Declaration public bool Succeeded { get; } Property Value Type Description Boolean TotalCount Declaration public int TotalCount { get; } Property Value Type Description Int32 Methods AwaiterOnComplete(Action) Declaration protected void AwaiterOnComplete(Action continuation) Parameters Type Name Description Action continuation Events m_OnComplete Declaration protected event Action m_OnComplete Event Type Type Description Action"
  },
  "api/BundleSystem.BundleAsyncRequest-1.html": {
    "href": "api/BundleSystem.BundleAsyncRequest-1.html",
    "title": "Class BundleAsyncRequest<T> | LocusBundleSystemV2 documentation",
    "keywords": "Class BundleAsyncRequest<T> this class is for simulating assetbundle request in editor. using this class we can provide unified structure. Inheritance Object BundleAsyncRequest<T> Implements IAwaiter < BundleAsyncRequest <T>> Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class BundleAsyncRequest<T> : CustomYieldInstruction, IAwaiter<BundleAsyncRequest<T>>, ICriticalNotifyCompletion, IDisposable Type Parameters Name Description T Constructors BundleAsyncRequest(T, TrackHandle<T>) create already ended bundle request for editor use Declaration public BundleAsyncRequest(T loadedAsset, TrackHandle<T> handle) Parameters Type Name Description T loadedAsset TrackHandle <T> handle BundleAsyncRequest(AssetBundleRequest, TrackHandle<T>) actual assetbundle request warpper Declaration public BundleAsyncRequest(AssetBundleRequest request, TrackHandle<T> handle) Parameters Type Name Description AssetBundleRequest request TrackHandle <T> handle Fields Empty Declaration public static readonly BundleAsyncRequest<T> Empty Field Value Type Description BundleAsyncRequest <T> Handle Declaration public readonly TrackHandle<T> Handle Field Value Type Description TrackHandle <T> Properties Asset Declaration public T Asset { get; } Property Value Type Description T IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean keepWaiting Declaration public override bool keepWaiting { get; } Property Value Type Description Boolean Progress Declaration public float Progress { get; } Property Value Type Description Single Methods Dispose() Declaration public void Dispose() GetAwaiter() Declaration public IAwaiter<BundleAsyncRequest<T>> GetAwaiter() Returns Type Description IAwaiter < BundleAsyncRequest <T>> OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation Pin() Declaration public BundleAsyncRequest<T> Pin() Returns Type Description BundleAsyncRequest <T> UnsafeOnCompleted(Action) Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation Explicit Interface Implementations IAwaiter<BundleAsyncRequest<T>>.GetResult() Declaration BundleAsyncRequest<T> IAwaiter<BundleAsyncRequest<T>>.GetResult() Returns Type Description BundleAsyncRequest <T> Implements IAwaiter<TResult>"
  },
  "api/BundleSystem.BundleAsyncSceneRequest.html": {
    "href": "api/BundleSystem.BundleAsyncSceneRequest.html",
    "title": "Class BundleAsyncSceneRequest | LocusBundleSystemV2 documentation",
    "keywords": "Class BundleAsyncSceneRequest Inheritance Object BundleAsyncSceneRequest Implements IAwaiter < BundleAsyncSceneRequest > Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public class BundleAsyncSceneRequest : CustomYieldInstruction, IAwaiter<BundleAsyncSceneRequest>, ICriticalNotifyCompletion Constructors BundleAsyncSceneRequest(AsyncOperation) actual assetbundle request warpper Declaration public BundleAsyncSceneRequest(AsyncOperation operation) Parameters Type Name Description AsyncOperation operation Properties keepWaiting Declaration public override bool keepWaiting { get; } Property Value Type Description Boolean Progress Declaration public float Progress { get; } Property Value Type Description Single Methods GetAwaiter() Declaration public IAwaiter<BundleAsyncSceneRequest> GetAwaiter() Returns Type Description IAwaiter < BundleAsyncSceneRequest > OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation UnsafeOnCompleted(Action) Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation Explicit Interface Implementations IAwaiter<BundleAsyncSceneRequest>.GetResult() Declaration BundleAsyncSceneRequest IAwaiter<BundleAsyncSceneRequest>.GetResult() Returns Type Description BundleAsyncSceneRequest IAwaiter<BundleAsyncSceneRequest>.IsCompleted Declaration bool IAwaiter<BundleAsyncSceneRequest>.IsCompleted { get; } Returns Type Description Boolean Implements IAwaiter<TResult>"
  },
  "api/BundleSystem.BundleErrorCode.html": {
    "href": "api/BundleSystem.BundleErrorCode.html",
    "title": "Enum BundleErrorCode | LocusBundleSystemV2 documentation",
    "keywords": "Enum BundleErrorCode Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public enum BundleErrorCode Fields Name Description ManifestParseError NetworkError NotFinished NotInitialized Success"
  },
  "api/BundleSystem.BundleManager.html": {
    "href": "api/BundleSystem.BundleManager.html",
    "title": "Class BundleManager | LocusBundleSystemV2 documentation",
    "keywords": "Class BundleManager Handle Resources expecially assetbundles. Also works in editor Inheritance Object BundleManager Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public static class BundleManager Fields ManifestFileName Declaration public const string ManifestFileName = \"Manifest.json\" Field Value Type Description String Properties GlobalBundleHash Declaration public static string GlobalBundleHash { get; } Property Value Type Description String Initialized Declaration public static bool Initialized { get; } Property Value Type Description Boolean LocalBundleRuntimePath Declaration public static string LocalBundleRuntimePath { get; } Property Value Type Description String LocalURL Declaration public static string LocalURL { get; } Property Value Type Description String LogMessages Declaration public static bool LogMessages { get; set; } Property Value Type Description Boolean RemoteURL Declaration public static string RemoteURL { get; } Property Value Type Description String ShowDebugGUI Declaration public static bool ShowDebugGUI { get; set; } Property Value Type Description Boolean Methods ChangeOwner<T>(TrackHandle<T>, Component) Assign new owner of track handle Declaration public static void ChangeOwner<T>(this TrackHandle<T> handle, Component newOwner) Parameters Type Name Description TrackHandle <T> handle Target handle Component newOwner New owner Type Parameters Name Description T DownloadAssetBundles(AssetBundleBuildManifest, IEnumerable<String>) acutally download assetbundles load from cache if cached Declaration public static BundleAsyncOperation<bool> DownloadAssetBundles(AssetBundleBuildManifest manifest, IEnumerable<string> subsetNames = null) Parameters Type Name Description AssetBundleBuildManifest manifest manifest you get from GetManifest() function IEnumerable < String > subsetNames names that you interested among full bundle list(optional) Returns Type Description BundleAsyncOperation < Boolean > GetDownloadSize(AssetBundleBuildManifest, IEnumerable<String>) Get download size of entire bundles(except cached) Declaration public static long GetDownloadSize(AssetBundleBuildManifest manifest, IEnumerable<string> subsetNames = null) Parameters Type Name Description AssetBundleBuildManifest manifest manifest you get from GetManifest() function IEnumerable < String > subsetNames names that you interested among full bundle list(optional) Returns Type Description Int64 GetInstanceTrackHandle(GameObject) Get instance track handle associated privided gameobject and it's parents Declaration public static TrackHandle<GameObject> GetInstanceTrackHandle(this GameObject gameObject) Parameters Type Name Description GameObject gameObject input game object Returns Type Description TrackHandle < GameObject > returns found track handle, invalid handle if not found GetManifest() Declaration public static BundleAsyncOperation<AssetBundleBuildManifest> GetManifest() Returns Type Description BundleAsyncOperation < AssetBundleBuildManifest > GetTrackingSnapshot() Get current tracking information dictionary Declaration public static Dictionary<int, BundleManager.TrackInfo> GetTrackingSnapshot() Returns Type Description Dictionary < Int32 , BundleManager.TrackInfo > Tracking information dictionary GetTrackingSnapshotNonAlloc(Dictionary<Int32, BundleManager.TrackInfo>) Get current tracking information dictionary, without allocation Declaration public static void GetTrackingSnapshotNonAlloc(Dictionary<int, BundleManager.TrackInfo> targetDict) Parameters Type Name Description Dictionary < Int32 , BundleManager.TrackInfo > targetDict Dictionary to fill Initialize(String) Initialize bundle system and load local bundles Declaration public static BundleAsyncOperation Initialize(string altRemoteUrl = null) Parameters Type Name Description String altRemoteUrl alternative remote url, local manifest will be used as default Returns Type Description BundleAsyncOperation async operation that can be yield return Instantiate(TrackHandle<GameObject>) Declaration public static GameObject Instantiate(this TrackHandle<GameObject> handle) Parameters Type Name Description TrackHandle < GameObject > handle Returns Type Description GameObject Instantiate(TrackHandle<GameObject>, Transform) Declaration public static GameObject Instantiate(this TrackHandle<GameObject> handle, Transform parent) Parameters Type Name Description TrackHandle < GameObject > handle Transform parent Returns Type Description GameObject Instantiate(TrackHandle<GameObject>, Transform, Boolean) Declaration public static GameObject Instantiate(this TrackHandle<GameObject> handle, Transform parent, bool instantiateInWorldSpace) Parameters Type Name Description TrackHandle < GameObject > handle Transform parent Boolean instantiateInWorldSpace Returns Type Description GameObject Instantiate(TrackHandle<GameObject>, Vector3, Quaternion) Declaration public static GameObject Instantiate(this TrackHandle<GameObject> handle, Vector3 position, Quaternion rotation) Parameters Type Name Description TrackHandle < GameObject > handle Vector3 position Quaternion rotation Returns Type Description GameObject Instantiate(TrackHandle<GameObject>, Vector3, Quaternion, Transform) Declaration public static GameObject Instantiate(this TrackHandle<GameObject> handle, Vector3 position, Quaternion rotation, Transform parent) Parameters Type Name Description TrackHandle < GameObject > handle Vector3 position Quaternion rotation Transform parent Returns Type Description GameObject IsAssetExist(String, String) Declaration public static bool IsAssetExist(string bundleName, string assetName) Parameters Type Name Description String bundleName String assetName Returns Type Description Boolean Load<T>(Component, String, String) Declaration public static BundleSyncRequest<T> Load<T>(this Component owner, string bundleName, string assetName) where T : UnityEngine.Object Parameters Type Name Description Component owner String bundleName String assetName Returns Type Description BundleSyncRequest <T> Type Parameters Name Description T LoadAll<T>(Component, String) Declaration public static BundleSyncRequests<T> LoadAll<T>(this Component owner, string bundleName) Parameters Type Name Description Component owner String bundleName Returns Type Description BundleSyncRequests <T> Type Parameters Name Description T LoadAsync<T>(Component, String, String) Declaration public static BundleAsyncRequest<T> LoadAsync<T>(this Component owner, string bundleName, string assetName) where T : UnityEngine.Object Parameters Type Name Description Component owner String bundleName String assetName Returns Type Description BundleAsyncRequest <T> Type Parameters Name Description T LoadScene(String, String, LoadSceneMode) Declaration public static void LoadScene(string bundleName, string sceneName, LoadSceneMode mode) Parameters Type Name Description String bundleName String sceneName LoadSceneMode mode LoadSceneAsync(String, String, LoadSceneMode) Declaration public static BundleAsyncSceneRequest LoadSceneAsync(string bundleName, string sceneName, LoadSceneMode mode) Parameters Type Name Description String bundleName String sceneName LoadSceneMode mode Returns Type Description BundleAsyncSceneRequest LoadWithSubAssets<T>(Component, String, String) Declaration public static BundleSyncRequests<T> LoadWithSubAssets<T>(this Component owner, string bundleName, string assetName) where T : UnityEngine.Object Parameters Type Name Description Component owner String bundleName String assetName Returns Type Description BundleSyncRequests <T> Type Parameters Name Description T Override<T>(TrackHandle<T>, ref TrackHandle<T>) Release old track handle and assign new handle. Declaration public static void Override<T>(this TrackHandle<T> newHandle, ref TrackHandle<T> oldHandle) Parameters Type Name Description TrackHandle <T> newHandle New handle TrackHandle <T> oldHandle Old handle to release Type Parameters Name Description T TrackExplicit<TRef, T>(TrackHandle<TRef>, T, Component) Track part of loaded asset. Used when you explicitely track an asset which does not directly loaded from bundle system. Declaration public static TrackHandle<T> TrackExplicit<TRef, T>(this TrackHandle<TRef> referenceHandle, T asset, Component newOwner = null) Parameters Type Name Description TrackHandle <TRef> referenceHandle Reference handle that loaded from same bundle T asset Asset to track Component newOwner New owner if specified, shares same owner if not specified Returns Type Description TrackHandle <T> Returns newly created track handle Type Parameters Name Description TRef T TryGetCachedManifest(out AssetBundleBuildManifest) get last cached manifest, to support offline play Declaration public static bool TryGetCachedManifest(out AssetBundleBuildManifest manifest) Parameters Type Name Description AssetBundleBuildManifest manifest Returns Type Description Boolean returns true if found, false otherwise UpdateImmediate() Declaration public static void UpdateImmediate()"
  },
  "api/BundleSystem.BundleManager.TrackInfo.html": {
    "href": "api/BundleSystem.BundleManager.TrackInfo.html",
    "title": "Struct BundleManager.TrackInfo | LocusBundleSystemV2 documentation",
    "keywords": "Struct BundleManager.TrackInfo Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public struct TrackInfo Fields Asset Declaration public object Asset Field Value Type Description Object BundleName Declaration public string BundleName Field Value Type Description String LoadTime Declaration public float LoadTime Field Value Type Description Single Owner Declaration public Component Owner Field Value Type Description Component ReleaseRequested Declaration public bool ReleaseRequested Field Value Type Description Boolean Properties IsPinned Declaration public readonly bool IsPinned { get; } Property Value Type Description Boolean Methods Pin() Declaration public void Pin()"
  },
  "api/BundleSystem.BundleSetting.html": {
    "href": "api/BundleSystem.BundleSetting.html",
    "title": "Struct BundleSetting | LocusBundleSystemV2 documentation",
    "keywords": "Struct BundleSetting Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public struct BundleSetting Fields AddressableNames Declaration public string[] AddressableNames Field Value Type Description String [] AssetNames Declaration public string[] AssetNames Field Value Type Description String [] AutoSharedBundle Declaration public bool AutoSharedBundle Field Value Type Description Boolean BundleName Declaration public string BundleName Field Value Type Description String CompressBundle Declaration public bool CompressBundle Field Value Type Description Boolean IncludedInPlayer Declaration public bool IncludedInPlayer Field Value Type Description Boolean"
  },
  "api/BundleSystem.BundleSyncRequest-1.html": {
    "href": "api/BundleSystem.BundleSyncRequest-1.html",
    "title": "Struct BundleSyncRequest<T> | LocusBundleSystemV2 documentation",
    "keywords": "Struct BundleSyncRequest<T> Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public struct BundleSyncRequest<T> : IDisposable Type Parameters Name Description T Constructors BundleSyncRequest(T, TrackHandle<T>) Declaration public BundleSyncRequest(T asset, TrackHandle<T> handle) Parameters Type Name Description T asset TrackHandle <T> handle Fields Asset Declaration public readonly T Asset Field Value Type Description T Empty Declaration public static readonly BundleSyncRequest<T> Empty Field Value Type Description BundleSyncRequest <T> Handle Declaration public readonly TrackHandle<T> Handle Field Value Type Description TrackHandle <T> Methods Dispose() Declaration public void Dispose() Pin() Declaration public BundleSyncRequest<T> Pin() Returns Type Description BundleSyncRequest <T>"
  },
  "api/BundleSystem.BundleSyncRequests-1.html": {
    "href": "api/BundleSystem.BundleSyncRequests-1.html",
    "title": "Struct BundleSyncRequests<T> | LocusBundleSystemV2 documentation",
    "keywords": "Struct BundleSyncRequests<T> Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public struct BundleSyncRequests<T> : IDisposable Type Parameters Name Description T Constructors BundleSyncRequests(T[], TrackHandle<T>[]) Declaration public BundleSyncRequests(T[] assets, TrackHandle<T>[] handles) Parameters Type Name Description T[] assets TrackHandle <T>[] handles Fields Assets Declaration public readonly T[] Assets Field Value Type Description T[] Empty Declaration public static readonly BundleSyncRequests<T> Empty Field Value Type Description BundleSyncRequests <T> Handles Declaration public readonly TrackHandle<T>[] Handles Field Value Type Description TrackHandle <T>[] Methods Dispose() Declaration public void Dispose() Pin() Declaration public BundleSyncRequests<T> Pin() Returns Type Description BundleSyncRequests <T>"
  },
  "api/BundleSystem.html": {
    "href": "api/BundleSystem.html",
    "title": "Namespace BundleSystem | LocusBundleSystemV2 documentation",
    "keywords": "Namespace BundleSystem Classes AssetBundleBuilder class that contains actual build functionalities AssetBundleBuildManifest AssetBundleBuildProcessors AssetBundleBuildSetting AssetDependencyTree this class finds out duplicated topmost assets and make them into one single shared bundle one by one(to reduce bundle rebuild) so that there would be no asset duplicated AssetDependencyTree.Context AssetDependencyTree.Node AssetDependencyTree.ProcessResult AssetDependencyTree.RootNode BundleAsyncOperation BundleAsyncOperation<T> assetbundle update BundleAsyncOperationBase BundleAsyncRequest<T> this class is for simulating assetbundle request in editor. using this class we can provide unified structure. BundleAsyncSceneRequest BundleManager Handle Resources expecially assetbundles. Also works in editor Utility Structs AssetBundleBuildManifest.BundleInfo BundleManager.TrackInfo BundleSetting BundleSyncRequest<T> BundleSyncRequests<T> TrackHandle<T> Interfaces IAwaiter<TResult> Enums BundleErrorCode"
  },
  "api/BundleSystem.IAwaiter-1.html": {
    "href": "api/BundleSystem.IAwaiter-1.html",
    "title": "Interface IAwaiter<TResult> | LocusBundleSystemV2 documentation",
    "keywords": "Interface IAwaiter<TResult> Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public interface IAwaiter<out TResult> : ICriticalNotifyCompletion Type Parameters Name Description TResult Properties IsCompleted Declaration bool IsCompleted { get; } Property Value Type Description Boolean Methods GetResult() Declaration TResult GetResult() Returns Type Description TResult"
  },
  "api/BundleSystem.TrackHandle-1.html": {
    "href": "api/BundleSystem.TrackHandle-1.html",
    "title": "Struct TrackHandle<T> | LocusBundleSystemV2 documentation",
    "keywords": "Struct TrackHandle<T> Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public struct TrackHandle<T> Type Parameters Name Description T Properties Id Track handle id for internal usage Declaration public int Id { readonly get; } Property Value Type Description Int32 Invalid Invalid track handle Declaration public static readonly TrackHandle<T> Invalid { get; } Property Value Type Description TrackHandle <T> Methods IsValid() Is this handle valid and tracked by bundle manager? Declaration public bool IsValid() Returns Type Description Boolean Release() Release this handle. Does not immediately release related bundles. Use BundleManager.UpdateImmediate() for immediate bundle reloading. Declaration public void Release()"
  },
  "api/BundleSystem.Utility.html": {
    "href": "api/BundleSystem.Utility.html",
    "title": "Class Utility | LocusBundleSystemV2 documentation",
    "keywords": "Class Utility Inheritance Object Utility Namespace : BundleSystem Assembly : cs.temp.dll.dll Syntax public static class Utility Methods CombinePath(String[]) Declaration public static string CombinePath(params string[] args) Parameters Type Name Description String [] args Returns Type Description String GetFilesInDirectory(List<String>, List<String>, String, Boolean) Search files in directory, this function only works in editor Declaration public static void GetFilesInDirectory(List<string> resultAssetPath, List<string> resultLoadPath, string folderPath, bool includeSubdir) Parameters Type Name Description List < String > resultAssetPath List < String > resultLoadPath String folderPath Boolean includeSubdir"
  },
  "index.html": {
    "href": "index.html",
    "title": "Locus Bundle System For Unity | LocusBundleSystemV2 documentation",
    "keywords": "Locus Bundle System For Unity Unity Forum Thread AssetBundle system from unity5 will be obsolute in future.\\ Unity Addressables system provides very flexible implementation that fits on any project.\\ But for my experience, there's huge learning curve to get into it.\\ And also, there's no synchronized api which is familier to Resource.Load Users. So here is my own bundle system that also utilizes Scriptable Build Pipline and it provides synchronized API. This is build up to support very common senarios I've experienced.\\ But you can extend this on purpose.(just fork and make modifications) \\ Synchronized API Support! Main pros of Unity Addressables system is memory management.\\ It unloads bundle according to bundle's reference count.\\ So you don't need to call Resources.UnloadUnusedAssets() function which hangs your gameplay. Mine support same functionality as well as synchronized api.\\ This is done by caching WWWRequest.\\ Note that caching assetbundles eats some memory(but quite low) When a assetbundle's reference count is zero.\\ It fires another assetbundle request and cache up until assetbundle can be unloaded and swapped. \\ Folder based Bundle & Local Bundles Like using Resources folder, you can specify folder that you want to make bundle(there's no bundle name in each asset).\\ It's very comfortable for users that loves organizing contents using Folders like me. And using local bundles, you can ship part of your bundles in player build.\\ It also can be changed later on by patching. Introduction Video How to Setup Assets -> Create -> Create Bundle Build Setting Create AssetBundleSetting ScriptableObject using Context Menu.\\ This object can be anywhere under Assets folder Setup Bundle Informations Bundle List BundleName : AssetBundle's name which you should provide when loading object from AssetBundles. Included In Player : if true, this bundle will be shipped with player(also can be updated). Folder : Drag or select folder, assets under that folder will be packed into this bundle. Include Subfolder : if true, will search assets from subfolders recurviely, your asset name when loading will be [SubFolderPath]/[AssetName] Compress Bundle : if true, it will use LMZA compression. otherwise LZ4 is used. Shipped local bundles will be always LZ4 Output Folder and URL Specify your Local/Remote bundle build output path here, also provide Remote URL for remote patch. Editor Functionalities Emulate In Editor : Use and Update actual assetbundles like you do in built player. Emulate Without Remote URL : if true, remote bundle will be loaded from remote output path, useful when your CDN is not ready yet. Clean Cache In Editor : if true, clean up cache when initializing. Force Rebuild : Disables BuildCache (When Scriptable Build Pipline ignores your modification, turn it on. It barely happens though) Useful Utilities. Cache Server : Cache server setting for faster bundle build(you need seperate Cache server along with asset cache server) Ftp : if you have ftp information, upload your remote bundle with single click. Multiple Settings \\ \\ Multiple AssetBundleSettings are supported.\\ You can set one of them as your active AssetBundleBuildSetting(Saved in EditorPref).\\ You can find active AssetBundleBuildSetting in menu. Auto Optimize Your Bundles This system support automated assetbundle optimization.\\ Which means, it automatically findout duplicated top-most assets in your bundle dependency tree,\\ and make them into seperated shared bundles. By using this, you can easily manage your dependencies, and there will be no duplicated assets included in your assetbundles.\\ \\ If you find out execpted shared bundles are created, define a bundle warp them up, it'll automatically disappeared in next build.\\ Folders in Packages This system can handle assets in Packages Folder.\\ If you can drag folder from there, It'll be fine.(development/local packages)\\ But if you dragging is freezed, just copy and paste it's path.\\ \\ Bundled Asset Path This is a utility struct that helps you save some time to write actual path yourself. BundleSystem.BundledAssetPath MyAsset; API Examples \\ Initialization Example IEnumerator Start() { //show log message BundleManager.LogMessages = true; //show some ongui elements for debugging BundleManager.ShowDebugGUI = true; //initialize bundle system & load local bundles yield return BundleManager.Initialize(); //get download size from latest bundle manifest var manifestReq = BundleManager.GetManifest(); yield return manifestReq; if (!manifestReq.Succeeded) { //handle error Debug.LogError(manifestReq.ErrorCode); } Debug.Log($\"Need to download { BundleManager.GetDownloadSize(manifestReq.Result) * 0.000001f } mb\"); //start downloading var downloadReq = BundleManager.DownloadAssetBundles(manifestReq.Result); while(!downloadReq.IsDone) { if(downloadReq.CurrentCount >= 0) { Debug.Log($\"Current File {downloadReq.CurrentCount}/{downloadReq.TotalCount}, \" + $\"Progress : {downloadReq.Progress * 100}%, \" + $\"FromCache {downloadReq.CurrentlyLoadingFromCache}\"); } yield return null; } if(!downloadReq.Succeeded) { //handle error Debug.LogError(downloadReq.ErrorCode); } //start to game } \\ API Examples IEnumerator ApiSamples() { //Sync loading { var loaded = BundleManager.Load<Texture2D>(\"Texture\", \"TextureName\"); //do something BundleManager.ReleaseObject(loaded); } //Async loading { var loadReq = BundleManager.LoadAsync<Texture2D>(\"Texture\", \"TextureName\"); yield return loadReq; //do something loadReq.Dispose(); } //Asnyc loading with { //use using clause for easier release using (var loadReq = BundleManager.LoadAsync<Texture2D>(\"Texture\", \"TextureName\")) { yield return loadReq; //do something } } //Instantiate Sync { var loaded = BundleManager.Load<GameObject>(\"Prefab\", \"PrefabName\"); //do something var instance = BundleManager.Instantiate(loaded); BundleManager.ReleaseObject(loaded); } //Instantiate Async with using clause(which is recommended, or just dispose request) { using (var loadReq = BundleManager.LoadAsync<GameObject>(\"Prefab\", \"PrefabName\")) { yield return loadReq; var instance = BundleManager.Instantiate(loadReq.Asset); } } //load scene { //Sync BundleManager.LoadScene(\"Scene\", \"SomeScene\", UnityEngine.SceneManagement.LoadSceneMode.Single); //Async yield return BundleManager.LoadSceneAsync(\"Scene\", \"SomeScene\", UnityEngine.SceneManagement.LoadSceneMode.Single); } } \\ Editor Test Script [Test] public void BundleTest() { //call this bofore you call bundle manager api while not playing //while not playing, BundleManager always utilies AssetDatabase BundleSystem.BundleManager.SetupApiTestSetting(); Assert.IsTrue(BundleSystem.BundleManager.IsAssetExist(\"LocalScene\", \"Inner/TitleScene\")); Assert.IsTrue(BundleSystem.BundleManager.IsAssetExist(\"Sprites\", \"MySprite\")); } Installation Install via Git URL Use Unity Package Manager to use it as is.\\ To update to latest version, Open up your Packages/manifest.json and delete following part \"lock\": { \"com.locus.bundlesystem\": { \"revision\": \"HEAD\", \"hash\": \"7e0cf885f61145eaa20a7901ef9a1cdc60d09438\" } } If you want to modify, clone this repo into your project's Packages folder. License MIT"
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | LocusBundleSystemV2 documentation",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto ! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis , ipsi manu Asiae quod marmorea . mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses !"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | LocusBundleSystemV2 documentation",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos . Putat nubes molle Troiae vero dea; nostraque plurima . Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert . Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit ; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces , ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  }
}